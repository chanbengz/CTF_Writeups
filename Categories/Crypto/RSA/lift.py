import os
import gmpy2
from Crypto.Util.number import *
import random

flag = b'flag{test_flag}'

def pad(s,l):
    return s + os.urandom(l - len(s))

def gen():
    g = getPrime(8)
    while True:
        p = g * random.getrandbits(138) + 1
        if isPrime(p):
            break
    while True:
        q = g * random.getrandbits(138) + 1
        if isPrime(q):
            break
    N = p ** 5 * q
    phi = p ** 4 * (p - 1) * (q - 1)
    d = random.getrandbits(256)
    e = inverse(d, phi)
    E = e * g
    hint = gmpy2.gcd(E, phi)
    return N, E, hint

flag = pad(flag,64)
m = bytes_to_long(flag)
n,e,hint = gen()
c = pow(m,e,n)
print(f'hint = {hint}')
print(f'n = {n}')
print(f'e = {e}')
print(f'c = {c}')
# hint = 199
# n = 1747756318552146082480343277102049017389961758488437075906138414931391140539864807783752101616382070526909862749411177437547742653435396616998686110716985514163869182641551682933752669530603623227083514893022305803463904116335424225861107284224855968599264898603
# e = 315105550689283599596777780565223374474439977300694844459519083723422345419971360385152266607237942585259561638412649106190238480137815914986971094754482617386030573340020583070507576501427158268349145757000270776619952813904549593095200407294040531632563696092149
# c = 43643811268384010156049453069155453779037246026917438833644154927853640882688282698997394603150927608888733254022764512035280106466601525407368471652346630722071638566276989799472187602940642752991126661105038720350045240709316322603157089585747541288618245526
